// Code generated by MockGen. DO NOT EDIT.
// Source: clab/dependency_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdependencyManager is a mock of dependencyManager interface.
type MockdependencyManager struct {
	ctrl     *gomock.Controller
	recorder *MockdependencyManagerMockRecorder
}

// MockdependencyManagerMockRecorder is the mock recorder for MockdependencyManager.
type MockdependencyManagerMockRecorder struct {
	mock *MockdependencyManager
}

// NewMockdependencyManager creates a new mock instance.
func NewMockdependencyManager(ctrl *gomock.Controller) *MockdependencyManager {
	mock := &MockdependencyManager{ctrl: ctrl}
	mock.recorder = &MockdependencyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdependencyManager) EXPECT() *MockdependencyManagerMockRecorder {
	return m.recorder
}

// AddDependency mocks base method.
func (m *MockdependencyManager) AddDependency(dependee, depender string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDependency", dependee, depender)
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockdependencyManagerMockRecorder) AddDependency(dependee, depender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockdependencyManager)(nil).AddDependency), dependee, depender)
}

// AddNode mocks base method.
func (m *MockdependencyManager) AddNode(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNode", name)
}

// AddNode indicates an expected call of AddNode.
func (mr *MockdependencyManagerMockRecorder) AddNode(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockdependencyManager)(nil).AddNode), name)
}

// CheckAcyclicity mocks base method.
func (m *MockdependencyManager) CheckAcyclicity() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAcyclicity")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAcyclicity indicates an expected call of CheckAcyclicity.
func (mr *MockdependencyManagerMockRecorder) CheckAcyclicity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAcyclicity", reflect.TypeOf((*MockdependencyManager)(nil).CheckAcyclicity))
}

// SignalDone mocks base method.
func (m *MockdependencyManager) SignalDone(nodeName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignalDone", nodeName)
}

// SignalDone indicates an expected call of SignalDone.
func (mr *MockdependencyManagerMockRecorder) SignalDone(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalDone", reflect.TypeOf((*MockdependencyManager)(nil).SignalDone), nodeName)
}

// String mocks base method.
func (m *MockdependencyManager) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockdependencyManagerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockdependencyManager)(nil).String))
}

// WaitForNodeDependencies mocks base method.
func (m *MockdependencyManager) WaitForNodeDependencies(nodeName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForNodeDependencies", nodeName)
}

// WaitForNodeDependencies indicates an expected call of WaitForNodeDependencies.
func (mr *MockdependencyManagerMockRecorder) WaitForNodeDependencies(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForNodeDependencies", reflect.TypeOf((*MockdependencyManager)(nil).WaitForNodeDependencies), nodeName)
}
